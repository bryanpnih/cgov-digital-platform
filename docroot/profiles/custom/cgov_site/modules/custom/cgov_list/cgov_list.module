<?php

/**
 * @file
 * Contains cgov_list.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Set allowed values for the list item styling.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function cgov_list_allowed_values_function(
  FieldStorageConfig $definition,
  ContentEntityInterface $entity = NULL,
  $cacheable
) {
  // This initially queried the view modes for paragraphs; however,
  // managed lists should only use a subset of the list item display
  // modes. So we are keeping it like this if the future requires it,
  // also it is much easier to change post go-live.
  $options = [
    'list_item_title' => 'Compact',
    'list_item_title_desc' => 'Title and Description',
    'list_item_title_desc_image' => 'Title, Description, and Image',
  ];

  return $options;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * See \Drupal\cgov_list\Plugin\Field\FieldFormatter\ListItemFormatter
 * for the setup for this.
 */
function cgov_list_paragraph_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() != 'cgov_internal_link') {
    return;
  }

  // Get the entity the link is pointing to, bail if
  // there is nothing.
  $link_entity = $entity->field_internal_link->entity;
  if (!$link_entity) {
    return;
  }

  // Let's handle the field overrides.
  $title = $entity->field_override_title->value;
  if ($title != NULL) {
    $build['title'] = $build['field_override_title'];
    $build['title'][0]['#field_name'] = 'title';
  }
  else {
    $build['title'] = $link_entity->field_short_title->view([
      'type' => 'string',
    ]);
    $build['title']['field'] = 'title';
  }
  unset($build['field_override_title']);

  // Let's figure out how we are drawing the link. There are
  // certain cases where we will not render it.
  $fieldDef = $display->getComponent('field_internal_link');
  $link_view_mode = $fieldDef['settings']['view_mode'];

  // Remove the link because we are going to handle it.
  unset($build['field_internal_link']);

  $entityTypeManager = \Drupal::entityTypeManager();
  $view_builder = $entityTypeManager->getViewBuilder($link_entity->getEntityTypeId());
  $link_build = $view_builder->view($link_entity, $link_view_mode, $link_entity->language()->getId());

  // Cheat linter.
  if ($link_build) {
    return;
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function cgov_list_paragraph_view_alter(array &$build, EntityInterface $entity) {
  if ($entity->bundle() != 'cgov_internal_link') {
    return;
  }
}
